#+TITLE: Josh Moller-Mara's Emacs configuration
#+OPTIONS: toc:1 h:4

The whole org-babel setup is shamelessly stolen from Sacha Chua.

My org-mode configuration is [[./jmm-org-config.org][here]].
* Emacs initialization and package management
  Here I set up where to find my Elisp files, and the repositories for
  packages.
#+begin_src emacs-lisp
(setq use-package-verbose t)
(add-to-list 'load-path "~/elisp")
(add-to-list 'load-path "~/.emacs.d/elisp")

(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("ELPA" . "https://elpa.gnu.org/packages/") t)
;; Marmalade has an insecure cert now
;; (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src

  Install packages if they aren't already.

#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
(unless (>= emacs-major-version 27)
  (package-initialize))
(when (not package-archive-contents)
  (package-refresh-contents))
(defvar my-packages '(ess
                      magit
                      helm
                      auctex
                      zenburn-theme
                      multiple-cursors
                      phi-search
                      expand-region
                      async
                      auto-complete
                      projectile
                      ledger-mode
                      f
		      dash
                      helm-projectile
                      helm-swoop
                      js2-mode
                      flycheck
                      use-package
                      ))

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))
(setq use-package-verbose t)
(require 'use-package)
(use-package auto-compile
  :ensure t
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC


  If I make any changes using Custom, I want them to be in a separate file.
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (if (file-exists-p custom-file)
      (load custom-file))
#+end_src

  Secret info. (Authentication info)
#+begin_src emacs-lisp
  (let ((secrets "~/.emacs.d/secrets.el"))
    (if (file-exists-p secrets) (load-file secrets)))
#+end_src

** Byte compile stuff?

#+begin_src emacs-lisp
(defun emacs/byte-recompile ()
  (interactive)
  (byte-recompile-directory "~/.emacs.d" 0)
  (byte-recompile-directory "~/elisp" 0))
#+end_src

* Basic configuration

Enable all the disabled commands
#+begin_src emacs-lisp
  (setq disabled-command-function nil)
#+end_src

#+begin_src emacs-lisp
;; I don't like having to type "yes"
(fset 'yes-or-no-p 'y-or-n-p)

(transient-mark-mode 1)
(column-number-mode 1)
(show-paren-mode 1)
(menu-bar-mode -1)
;; I'll set this in customize, so by default it doesn't take it away.
;; (tool-bar-mode 0)
;; (scroll-bar-mode 0)
(ignore-errors (horizontal-scroll-bar-mode 0)) ;Doesn't exist on some earlier emacs
(blink-cursor-mode 0)

(set-register ?e '(file . "~/.emacs.d/jmm-emacs.org"))
(set-register ?d '(file . "~/Downloads/"))

(server-start)

(setq visible-bell 0)                   ;Set visible bell on.
(setq ring-bell-function 'ignore)       ;Visible bell.

(setq frame-title-format "Emacs - %b")
(setq set-mark-command-repeat-pop t)
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
(winner-mode 1)
(setq focus-follows-mouse t)
(setq mouse-autoselect-window t) ;Sloppy focus
(setq inhibit-splash-screen t)
(setq Man-notify-method 'pushy)
;;(set-frame-font "-misc-fixed-medium-r-normal-*-11-*-*-*-*-*-*-*")
(setq visual-line-fringe-indicators '(nil right-curly-arrow))
(setq mouse-yank-at-point t)

(setq history-length 1000)
(setq history-delete-duplicates t)

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
(setq shr-external-browser 'browse-url-generic) ;For eww
(setq epg-gpg-program "gpg2")
#+end_src

Make scripts executable
#+begin_src emacs-lisp
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+end_src

** Prompt before exiting Emacs

#+begin_src emacs-lisp
(setq kill-emacs-query-functions
      (cons (lambda () (yes-or-no-p "Really kill Emacs?"))
     kill-emacs-query-functions))
#+end_src

** Dealing with the clipboard
#+begin_src emacs-lisp
(setq x-select-enable-clipboard t) ; as above
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)
(setq select-enable-primary t)
#+end_src
** Windmove
#+begin_src emacs-lisp
(windmove-default-keybindings 'control)
#+end_src
** Load personal files

   Load some elisp files that aren't tracked in git. Usually this is
   scratchwork that I haven't completed, but it can also be personal
   configuration options like setting ~user-full-name~.

#+BEGIN_SRC emacs-lisp
(require 'f)
(defun jmm/org-maybe-tangle-el (file)
  "Tangle an org file to an .el file only if org file is newer."
  (let ((export-file (concat (f-no-ext file) ".el")))
    (when (or (not (file-exists-p export-file))
	      (file-newer-than-file-p file export-file))
      (require 'org)
      (org-babel-tangle-file file export-file))))

;; This gets called at the end of init.el
(defun jmm/load-personal-files ()
  (let ((personal (concat user-emacs-directory "personal")))
    (when (f-directory-p personal)
      ;; Ignore files starting with things like ".#"
      (mapc 'jmm/org-maybe-tangle-el (-filter #'f-file? (directory-files personal t "^[a-zA-Z0-9].*.*org$")))
      (mapc 'load (directory-files personal t "^[a-zA-Z0-9].*.*el$")))))
#+END_SRC

* Theme/Appearance
#+begin_src emacs-lisp
(when window-system
  (add-to-list 'custom-theme-load-path "~/elisp/zenburn-emacs/")
  (load-theme 'zenburn))
#+end_src
** Font
Set my font
#+BEGIN_SRC emacs-lisp
(defun josh/set-my-font (myfont)
  (when (and window-system (x-list-fonts myfont))
    (set-frame-font myfont)
    (add-to-list 'default-frame-alist
                 (cons 'font myfont))))

;; (josh/set-my-font "-unknown-DejaVu Sans Mono-normal-normal-normal-*-10-*-*-*-m-0-iso10646-1")
(josh/set-my-font "-PfEd-DejaVu Sans Mono-normal-normal-normal-*-10-*-*-*-m-0-iso10646-1")
#+END_SRC
* Keybindings

#+begin_src emacs-lisp
;; (bind-key "C-x g" 'gnus)
;; (bind-key "C-x C-a" 'artist-mode)
(bind-key "C-x C-b" 'ibuffer)
(bind-key "<f9> m" 'magit-status)
(define-key (current-global-map) [remap imenu] 'helm-imenu)
;; Replaced with helm
#+end_src
** Keybindings to load org
   Again, most of my org-mode configuration is [[./jmm-org-config.org][here]], but for some dumb
   reason I'm trying to get my emacs startup time fast (which is dumb
   because I just keep a daemon running and use ~emacsclient~ ðŸ¤·), so
   I don't load my org config until org is actually loaded. These are
   some keybindings I use to load org.

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :bind (("C-c c" . org-capture)
	 ("C-c a" . org-agenda)
	 ("C-c l" . org-store-link)
	 ("C-c L" . org-insert-link-global)
	 ("C-c o" . org-open-at-point-global)
	 ("<f12>" . jmm/org-default-agenda)
	 ("<f9> i" .  jmm/org-export-ical-stuff)
	 ("<f9> j" . josh/helm-org-jump)
	 ("<f9> z" . josh/helm-org-clock-in2)
	 ("<f9> J" . jmm/helm-org-jump-project))
  :mode ("\\.org\\'" . org-mode))
#+END_SRC

* Autosaves and backups

Autosaves
#+begin_src emacs-lisp
;; Put autosave files (ie #foo#) in one place, *not*
;; scattered all over the file system!
(defvar autosave-dir
 "~/emacs_autosaves/")

(make-directory autosave-dir t)

(defun auto-save-file-name-p (filename)
  (string-match "^#.*#$" (file-name-nondirectory filename)))

(defun make-auto-save-file-name ()
  (concat autosave-dir
   (if buffer-file-name
      (concat "#" (file-name-nondirectory buffer-file-name) "#")
    (expand-file-name
     (concat "#%" (buffer-name) "#")))))
#+end_src

Backups
Put backup files (ie foo~) in one place too. (The backup-directory-alist
list contains regexp=>directory mappings; filenames matching a regexp are
backed up in the corresponding directory. Emacs will mkdir it if necessary.)
#+begin_src emacs-lisp
  (defvar backup-dir "~/emacs_backups/")
  (make-directory backup-dir t)
  (setq backup-directory-alist (list (cons ".dreams." ".") (cons "." backup-dir)))
#+end_src

* Autocompletion, Hippie expand

#+begin_src emacs-lisp
(bind-key "M-?" 'hippie-expand)
#+end_src

** Hippie Expand stuff:

#+begin_src emacs-lisp
(setq hippie-expand-try-functions-list (quote (try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol try-expand-dict-command)))
#+end_src

#+begin_src emacs-lisp
(defun he-dict-command-beg ()
  (let ((p))
    (save-excursion
      (backward-word 1)
      (setq p (point)))
    p))

(defun try-expand-dict-command (old)
  (unless old
    (he-init-string (he-dict-command-beg) (point))
    (setq he-expand-list (sort
			  (all-completions he-search-string (mapcar 'list (lookup-words (concat old "*") ispell-complete-word-dict)))
			  'string-lessp)))
  (while (and he-expand-list
              (he-string-member (car he-expand-list) he-tried-table))
    (setq he-expand-list (cdr he-expand-list)))
  (if (null he-expand-list)
      (progn
	(when old (he-reset-string))
	())
    (he-substitute-string (car he-expand-list))
    (setq he-tried-table (cons (car he-expand-list) (cdr he-tried-table)))
    (setq he-expand-list (cdr he-expand-list))
    t))
#+end_src

* Compiling conveniences

#+begin_src emacs-lisp
(require 'compile)
(add-hook 'c++-mode-hook
	  (lambda ()
	    (unless (file-exists-p "Makefile")
	      (set (make-local-variable 'compile-command)
		   ;; emulate make's .c.o implicit pattern rule, but with
		   ;; different defaults for the CC, CPPFLAGS, and CFLAGS
		   ;; variables:
		   ;; $(CC) -c -o $@ $(CPPFLAGS) $(CFLAGS) $<
		   (let ((file (file-name-nondirectory buffer-file-name)))
		     (format "%s %s %s -o %s"
			     (or (getenv "CPP") "g++")
			     (or (getenv "CFLAGS") "-g -Os")
			     file
			     (file-name-sans-extension file)
			     ))))))
#+end_src

#+begin_src emacs-lisp
(bind-key "<f9> <f9>" 'recompile)
#+end_src

#+begin_src emacs-lisp
(setq compilation-scroll-output 1)
#+end_src

* Spelling

#+begin_src emacs-lisp
(setq-default ispell-program-name "hunspell")
(setq-default ispell-grep-command "grep")
(setq-default ispell-grep-options "-iE")
(setq-default ispell-complete-word-dict "/usr/share/dict/american-english")
(setq-default ispell-silently-savep t)
;; (use-package rw-hunspell
;;   :after flyspell)
#+end_src

#+begin_src emacs-lisp
(add-hook `text-mode-hook `flyspell-mode)
(add-hook `latex-mode-hook `flyspell-mode)
(add-hook `tex-mode-hook `flyspell-mode)
(add-hook `bibtex-mode-hook `flyspell-mode)
#+end_src

** Accepting previous misspelled words

#+begin_src emacs-lisp
(defun flyspell-accept-prev (position &optional savetype)
  "Accept the previously mispelled word onscreen. Defaults saving to session, but optional savetype can save to personal dict"
  (interactive "d")
  (or savetype (setq savetype 'session))
  (let ((top (window-start))
	(bot (window-end))
	correctpos)
    (save-excursion
      (save-restriction
	(narrow-to-region top bot)
	(overlay-recenter (point))

	  (let ((overlay-list (overlays-in (point-min) position))
		(new-overlay 'dummy-value))

	    ;; search for previous (new) flyspell overlay
	    (while (and new-overlay
			(or (not (flyspell-overlay-p new-overlay))
			    ;; check if its face has changed
			    (not (eq (get-char-property
				      (overlay-start new-overlay) 'face)
				     'flyspell-incorrect))))
	      (setq new-overlay (car-safe overlay-list))
	      (setq overlay-list (cdr-safe overlay-list)))

	    ;; if nothing new exits new-overlay should be nil
	    (if new-overlay ;; the length of the word may change so go to the start
		(setq correctpos
		      (overlay-start new-overlay))))

	(when correctpos
	  (save-excursion
	    (goto-char correctpos)
	    (let ((cursor-location (point))
		  (opoint (point))
		  (word (flyspell-get-word)))
	      (if (consp word)
		  (let ((start (car (cdr word)))
			(end (car (cdr (cdr word))))
			(word (car word))
			poss ispell-filter)
		    (flyspell-do-correct savetype poss word cursor-location start end opoint)
		    (ispell-pdict-save t))))))))))

(defun flyspell-accept-prev-save (position)
  "Save the previously mispelled word. See flyspell-accept-prev"
  (interactive "d")
  (flyspell-accept-prev position 'save))

(add-hook 'flyspell-mode-hook
 (lambda ()
   (define-key flyspell-mode-map (kbd "C-M-;") 'flyspell-accept-prev)
   (define-key flyspell-mode-map (kbd "C-:") 'flyspell-accept-prev-save)
   ))
#+end_src

* LaTeX

#+begin_src emacs-lisp
(setq latex-run-command "pdflatex")
(setq tex-output-extension ".pdf")
#+end_src

#+begin_src emacs-lisp
(add-hook `latex-mode-hook (lambda () (defun tex-view ()
  (interactive)
  (tex-send-command "evince" (tex-append tex-print-file ".pdf") t))))
#+end_src

Make it easier to insert Greek symbols
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+end_src

** Bibtex stuff (no longer needed?)
#+begin_src emacs-lisp
(add-hook 'latex-mode-hook
	  (lambda ()
	    (defun tex-bibtex-file ()
	      "Run BibTeX on the current buffer's file."
	      (interactive)
	      (if (tex-shell-running)
		  (tex-kill-job)
		(tex-start-shell))
	      (let* (shell-dirtrack-verbose
		     (source-file (tex-main-file))
		     (tex-out-file
		      (tex-append (file-name-nondirectory source-file) ""))
		     (file-dir (file-name-directory (expand-file-name source-file))))
		(tex-send-command tex-shell-cd-command file-dir)
		(tex-send-command tex-bibtex-command tex-out-file))
	      (tex-display-shell))))
#+end_src

** AUCTeX and skeletons
#+begin_src emacs-lisp
  ;; AUCTeX
  ;; (setq load-path (append load-path "~/.emacs.d/elpa/auctex-11.87.2/"))
  ;; (load "auctex.el" nil t t)
  ;; (load "preview-latex.el" nil t t)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode) ;use pdflatex by default

  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)

  (setq skeleton-end-newline nil)
  (add-hook 'LaTeX-mode-hook
   (lambda ()
     (define-key LaTeX-mode-map (kbd "` v (") 'latex-skeleton-left-paren)
     (define-key LaTeX-mode-map (kbd "` v [") 'latex-skeleton-left-bracket)
     (define-key LaTeX-mode-map (kbd "` v {") 'latex-skeleton-left-brace)
     (define-key LaTeX-mode-map (kbd "` v t") 'latex-math-text)
     (define-key LaTeX-mode-map (kbd "` v $") 'quoted-parens)
     (define-key LaTeX-mode-map (kbd "` v %") 'quoted-brackets)
     ))

  (define-skeleton latex-skeleton-left-paren
    "Insert \\left( ... \\right)."
    nil "\\left(" _ "\\right)")

  (define-skeleton latex-skeleton-left-bracket
    "Insert \\left[ ... \\right]."
    nil "\\left[" _ "\\right]")

  (define-skeleton latex-skeleton-left-brace
    "Insert \\left\\{ ... \\right\\}."
    nil "\\left\\{" _ "\\right\\}")

  (define-skeleton latex-math-text
    "Insert \\text{ ... }."
    nil "\\text{" _ "}")

  (define-skeleton quoted-parens
    "Insert \\( ... \\)."
    nil "\\(" _ "\\)")

  (define-skeleton quoted-brackets
    "Insert \\[ ... \\]."
    nil "\\[" _ "\\]")
#+end_src
** AUCTeX handling errors
Sometimes AUCTex can't parse errors correctly, prompting you to create a directory
#+begin_src emacs-lisp
(setq LaTeX-command-style '(("" "%(PDF)%(latex) -file-line-error %S%(PDFout)")))
#+end_src
* R/ESS
  This seems to be necessary when installing ESS from MELPA.
#+begin_src emacs-lisp
(use-package ess
  :ensure t
  :mode (("\\.[rR]\\'" . R-mode)
	 ("\\.[rR]profile\\'" . R-mode)
	 ("NAMESPACE\\'" . R-mode)
	 ("\\.jl\\'" . ess-julia-mode)
	 ("\\.[jJ][aA][gG]\\'" . ess-jags-mode))
  :config 
   ;; I like how ESS previously indented continuations as it makes ggplot
   ;; code easier to read.
  (add-to-list 'ess-style-alist
		       '(MY-STYLE
			 (ess-indent-level . 4)
			 (ess-first-continued-statement-offset . 4)
			 (ess-continued-statement-offset . 0)
			 (ess-brace-offset . 0)
			 (ess-arg-function-offset . 4)
			 (ess-arg-function-offset-new-line . '(4))
			 (ess-expression-offset . 4)
			 (ess-else-offset . 0)
			 (ess-close-brace-offset . 0)))
  (setq ess-default-style 'MY-STYLE))
#+end_src

#+begin_src emacs-lisp
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)

  (add-hook 'ess-mode-hook
            (lambda ()
              (flyspell-prog-mode)
              (auto-complete-mode 1)
              (ac-flyspell-workaround)))

  (add-hook 'inferior-ess-mode-hook
            (lambda ()
              (auto-complete-mode 1)))

  (autoload 'ess-rdired "ess-rdired"
    "View *R* objects in a dired-like buffer." t)
#+end_src
** JAGS
#+begin_src emacs-lisp
;; (require 'ess-jags-d)
#+end_src

** View an object
#+begin_src emacs-lisp
  (defun ess-dump-object-into-view-buffer (object)
    "Edit an ESS object in its view buffer."
    (interactive
     (progn
       (ess-force-buffer-current "Process to dump from: ")
       (if (ess-ddeclient-p)
           (list (read-string "Object to edit: "))
         (ess-read-object-name "Object to edit"))))
    (ess-execute (ess-rdired-get object)
               nil "R view" ))

  (eval-after-load "ess-mode"
    '(define-key ess-mode-map (kbd "C-c v") 'ess-dump-object-into-view-buffer))
#+end_src

** Clear the shell
#+begin_src emacs-lisp
(defun clear-shell ()
   (interactive)
   (let ((old-max comint-buffer-maximum-size))
     (setq comint-buffer-maximum-size 0)
     (comint-truncate-buffer)
     (setq comint-buffer-maximum-size old-max)))
#+end_src

** Truncate automatically
#+begin_src emacs-lisp
  (setq comint-buffer-maximum-size 2000)
  (add-hook 'comint-output-filter-functions
            'comint-truncate-buffer)
#+end_src
* ERC
I don't really use ERC anymore.
#+begin_src emacs-lisp
(use-package erc
  :commands (erc)
  :init
  (setq erc-nick "emdash"
        erc-server "localhost"
        erc-port "1799")
  (setq erc-auto-query 'bury)
  :config
  (require 'erc-services)
  (erc-services-mode 1))
#+end_src
** Notify
#+begin_src emacs-lisp
;;list of regexpes ignored by tray icon
(defun erc-tray-change-state (arg)
  "Enables or disable blinking, depending on arg"
  (if arg
      (shell-command-to-string
       "echo B > /tmp/tray_daemon_control")
    (shell-command-to-string
     "echo b > /tmp/tray_daemon_control")))
(defun erc-tray-update-state ()
  "Updates the state of the tray icon according to the contents
of erc-modified-channels-alist"
  (interactive)
  (let ((blinkify nil))
    (mapcar (lambda (el)
	      (when (string-match "erc-current-nick-face" (face-name (nthcdr 2 el)))
		(setq blinkify t)))
	    erc-modified-channels-alist)
    (erc-tray-change-state blinkify)))
(when window-system
  (add-hook 'erc-track-list-changed-hook 'erc-tray-update-state))
(setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT"))
#+end_src

** More notify stuff
#+begin_src emacs-lisp
  ;; Notify my when someone mentions my nick.
  (defun erc-global-notify (matched-type nick msg)
    (interactive)
    (when (eq matched-type 'current-nick)
      (shell-command
       (concat "notify-send -t 4000 -c \"im.received\" \""
               (car (split-string nick "!"))
               " mentioned your nick\" \""
               msg
               "\""))))
  (add-hook 'erc-text-matched-hook 'erc-global-notify)
#+end_src
** Timestamp
#+begin_src emacs-lisp
(make-variable-buffer-local
 (defvar erc-last-datestamp nil))

(defun ks-timestamp (string)
  (erc-insert-timestamp-left string)
  (let ((datestamp (erc-format-timestamp (current-time) erc-datestamp-format)))
    (unless (string= datestamp erc-last-datestamp)
      (erc-insert-timestamp-left datestamp)
      (setq erc-last-datestamp datestamp))))


(setq erc-timestamp-only-if-changed-flag t
      erc-timestamp-format "%H:%M "
      erc-datestamp-format " === [%Y-%m-%d %a] ===\n" ; mandatory ascii art
      erc-fill-prefix "      "
      erc-insert-timestamp-function 'ks-timestamp)
#+end_src

* rcirc
#+begin_src emacs-lisp
(use-package rcirc
  :commands (rcirc)
  :init
  (setq rcirc-debug-flag t)
  (setq rcirc-default-nick "emdash")
  (setq rcirc-default-user-name "joshm")
  (setq rcirc-default-full-name "Josh Moller-Mara")
  (setq rcirc-buffer-maximum-lines 2000)
  :config
  ;; Adjust the colours of one of the faces.
  (set-face-foreground 'rcirc-my-nick "red" nil)
  (add-hook 'rcirc-mode-hook (lambda ()
			       (flyspell-mode 1)))
  (add-hook 'rcirc-mode-hook
            (lambda ()
              (rcirc-track-minor-mode 1))))
#+end_src
** Reconnect after disconnect

#+begin_src emacs-lisp
  (eval-after-load 'rcirc
    '(defun-rcirc-command reconnect (arg)
       "Reconnect the server process."
       (interactive "i")
       (unless process
         (error "There's no process for this target"))
       (let* ((server (car (process-contact process)))
              (port (process-contact process :service))
              (nick (rcirc-nick process))
              channels query-buffers)
         (dolist (buf (buffer-list))
           (with-current-buffer buf
             (when (eq process (rcirc-buffer-process))
               (remove-hook 'change-major-mode-hook
                            'rcirc-change-major-mode-hook)
               (if (rcirc-channel-p rcirc-target)
                   (setq channels (cons rcirc-target channels))
                 (setq query-buffers (cons buf query-buffers))))))
         (delete-process process)
         (rcirc-connect server port nick
                        rcirc-default-user-name
                        rcirc-default-full-name
                        channels))))
#+end_src

** Load rcirc-notify
#+begin_src emacs-lisp
(use-package rcirc-notify
  :after rcirc)
#+end_src

** Load rcirc color
#+begin_src emacs-lisp
(use-package rcirc-colo
  :after rcirc)
#+end_src

** Display IRC activity in window manager
   I have a toolbar in my window manager that lets me see things like
   CPU usage, memory, etc. So I thought it'd be useful to also display
   IRC activity. This just passes rcirc's activity string to a script
   that updates the toolbar.
#+BEGIN_SRC emacs-lisp
  (defun josh/rcirc-activity-report ()
    "Report rcirc activity to the window manager, which displays it"
    (start-process "LogTime"
                     (get-buffer-create " *josh-rcirc-buffer*")
                     "~/.sawfish/scripts/rcirc-update.sh"
                     rcirc-activity-string))

  (add-hook 'rcirc-update-activity-string-hook 'josh/rcirc-activity-report)
#+END_SRC
* Scheme
#+begin_src emacs-lisp
(setq scheme-program-name "csi")

(defun run-half-scheme () "
   Run Scheme in half a window."
   (interactive)
   (split-window-vertically nil)
   (other-window 1)
   (call-interactively 'run-scheme))

(add-hook 'scheme-mode-hook
 (lambda ()
   (define-key scheme-mode-map (kbd "C-c C-s") 'run-half-scheme)
   ))
#+end_src
* C
#+begin_src emacs-lisp
(setq-default c-basic-offset 8)
(setq c-default-style "gnu")
#+end_src
* Clojure

  CIDER is one of the best environments I've worked in. Give it (and
  Clojure) a try it you haven't already.

#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t
  :mode (("\\.cljs\\'" . clojurescript-mode)
	 ("\\.cljc\\'" . clojurec-mode)
	 ("\\(?:build\\|profile\\)\\.boot\\'" . clojure-mode)
	 ("\\.\\(clj\\|dtm\\|edn\\)\\'" . clojure-mode))
  :init
  ;; Handy stuff for starting up figwheel
  (setq cider-cljs-lein-repl
      "(do (require 'figwheel-sidecar.repl-api)
           (figwheel-sidecar.repl-api/start-figwheel!)
           (figwheel-sidecar.repl-api/cljs-repl))")
  :hook ((clojure-mode . clojure-refactor-hook-fn)
	 (clojure-mode . aggressive-indent-mode)))

(use-package aggressive-indent
  :ensure t
  :after cider)
#+END_SRC
** clj-refactor

   Some handy refactoring things for Clojure. A lot of it is already in Clojure-mode
#+BEGIN_SRC emacs-lisp
(use-package clj-refactor
  :ensure t
  :after cider)

(defun clojure-refactor-hook-fn ()
  (clj-refactor-mode 1)
  (yas-minor-mode 1)
  (cljr-add-keybindings-with-prefix "C-c C-m"))
#+END_SRC

* Shells
#+begin_src emacs-lisp
(defun run-half-shell ()
   "Run a shell in half a window."
   (interactive)
   (split-window-vertically nil)
   ;; (other-window 1)
   (shell (concat (buffer-name) " shell")))

(bind-key "C-x 4 s" 'run-half-shell)
#+end_src
* Encryption
#+begin_src emacs-lisp
(require 'epa-file)			;So we can encrypt authinfo
(setq epa-file-cache-passphrase-for-symmetric-encryption t) ;So it doesn't ask for password multiple times
#+end_src
  Put the following on the top of files to encrypt them to myself.
  May need to run "normal-mode" to set the file local variables.
  Also, remember that just because files are encrypted to you does not
  mean they're signed by you. So when encrypting stuff for yourself,
  you may want to sign it.
#+begin_src emacs-lisp
  (set-register ?G "-*- epa-file-encrypt-to: (\"j.moller-mara@berkeley.edu\") -*-\n")
#+end_src
* BBDB
#+begin_src emacs-lisp
(use-package bbdb
  :defer t
  :config (progn
	    (bbdb-initialize 'gnus 'message)
	    (setq bbdb-use-pop-up nil)              ;Don't pop up
	    (setq bbdb-quiet-about-name-mismatches nil)))
#+end_src
* GNUS
  I don't really use GNUS much anymore. I used to use it for email,
  news groups (when CS classes at Berkeley had them before Piazza),
  and reading RSS feeds.
#+begin_src emacs-lisp
(setq mail-user-agent 'gnus-user-agent)	;Uses Message mode instead of mail mode
#+end_src
** Spoofing dates
#+begin_src emacs-lisp
(defun gnus-date-spoof ()
  (interactive)
  (message-generate-headers '(Date))
  (setq message-deletable-headers (delq 'Date message-deletable-headers))
  (message "Deletable headers are %s %s" message-deletable-headers "(DONT FORGET SMTPMAIL-FQDN)"))

(defun gnus-date-unspoof ()
  (interactive)
  (add-to-list 'message-deletable-headers 'Date)
  (message "Deletable headers are %s" message-deletable-headers))
#+end_src

** Kill IMAP
Sometimes IMAP freezes, so I like to be able to kill it.
#+begin_src emacs-lisp
(defun kill-imap ()
  "Kill openssl imap"
  (interactive)
  ;; (delete-process "imap")
  (mapc (lambda (x) (if (string-match "imap" (process-name x)) (delete-process x))) (process-list)))
#+end_src

** Espeak article
   Read an article out loud
#+begin_src emacs-lisp
(defun josh/espeak-article (&optional arg)
  "Select the gnus article and read it"
  (interactive "P")
  (with-current-buffer gnus-article-buffer
    (save-excursion
      (save-restriction
        (widen)
        (when (article-goto-body)
          (let* ((wpm (number-to-string (* (if arg arg 5) 100)))
                 (process (start-process "espeak-process" " *espeak-gnus*" "espeak" "-a" "200" "-v" "english-us" "-s" wpm)))
            (process-send-region process (point) (point-max))
            (process-send-string process "\n")
            (process-send-eof process)))))))

;; (bind-key "<f9> e" 'josh/espeak-article)
#+end_src

** Go to RSS link in browser
   This code basically gives me a hotkey ("v") that allows me to
   quickly open the link titled "link" in an external browser. This is
   pretty useful for RSS feeds when I'm interested in an article and
   want to read more.
#+BEGIN_SRC emacs-lisp
  (defun josh/get-link-info-at-point ()
    "Return a cons of the link's text and url"
    (let* ((widget (widget-at (point)))
           (start (widget-get widget :from))
           (end (widget-get widget :to)))
      (cons (if start
                (buffer-substring-no-properties start end))
            (widget-get widget :value))))

  (defun josh/get-all-links ()
    "Return a list of links in the buffer"
    (let (links)
      (save-excursion
        (goto-char (point-min))
        (while (progn
                 (let ((skip (text-property-any (point) (point-max) 'help-echo nil)))
                   (if (or (eobp)
                           (not (setq skip (text-property-not-all skip (point-max)
                                                                  'help-echo nil))))
                       nil
                     (progn
                       (goto-char skip)
                       (setq links (cons (josh/get-link-info-at-point) links)))))))
      links)))

  (defun josh/gnus-follow-link ()
    "Find the link named \"link\" and follow it in the browser"
    (interactive)
    (save-excursion
      (set-buffer gnus-article-buffer)
      (let ((link
             (-filter (lambda (x) (and (stringp (car x)) (string-match "link" (car x))))
                      (josh/get-all-links))))
        (if link
            (funcall shr-external-browser (cdar link))))))

  (add-hook 'gnus-summary-mode-hook
            (lambda ()
              (local-set-key (kbd "v") 'josh/gnus-follow-link)))
#+END_SRC
* Dired
** Listing switches
#+begin_src emacs-lisp
(setq dired-listing-switches "-alhv")
#+end_src
** Other settings
   I usually want to copy recursively. Don't ask me each time.
#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always)
#+END_SRC

  Apparently you can change permissions in ~wdired~
#+BEGIN_SRC emacs-lisp
(setq wdired-allow-to-change-permissions t)
#+END_SRC
** Dired-X
Because dired-jump is pretty useful
#+begin_src emacs-lisp
(use-package dired-x
  :bind (("C-x C-j" . dired-jump)))
#+end_src

** Copying remote file paths
   Sometimes I want to get the remote file path name, in order to make it easier to rsync and scp.
#+BEGIN_SRC emacs-lisp
(defun josh/dired-copy-remote-filename ()
  "Copy the file names of marked files in a way that's easy to
paste into a terminal. Hopefully understandable by rsync or scp."
  (interactive)
  ;; Get the default directory's host name
  (concat default-directory)
  (let ((string
         (mapconcat 'identity
                    (mapcar (lambda (path)
                              (if (tramp-tramp-file-p path)
                                  (let* ((dissect (tramp-dissect-file-name path))
                                         (user (tramp-file-name-user dissect))
                                         (host (tramp-file-name-host dissect))
                                         (loc (tramp-file-name-localname dissect)))
                                    (concat (if user (concat user "@")) host ":" "\"" (shell-quote-argument loc) "\"")
                                    )
                                (concat "\"" (shell-quote-argument path) "\"")))
                            (dired-get-marked-files))
                    " ")))
    (kill-new string)
    (x-set-selection 'PRIMARY string)   ;So I can middle click paste it into xterm
    (message "%s" string)))

(eval-after-load 'dired
                     '(define-key dired-mode-map (kbd "W") 'josh/dired-copy-remote-filename))
#+END_SRC

** Opening files with xdg-open

#+BEGIN_SRC emacs-lisp
    (defun xah-open-in-external-app ()
    "Open the current file or dired marked files in external app.
  The app is chosen from your OS's preference.

  URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
  Version 2015-01-26"
    (interactive)
    (let* (
           (xah-file-list
            (if (string-equal major-mode "dired-mode")
                (dired-get-marked-files)
              (list (buffer-file-name))))
           (xah-do-it-p (if (<= (length xah-file-list) 5)
                         t
                       (y-or-n-p "Open more than 5 files? "))))

      (when xah-do-it-p
        (cond
         ((string-equal system-type "windows-nt")
          (mapc
           (lambda (fPath)
             (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t))) xah-file-list))
         ((string-equal system-type "darwin")
          (mapc
           (lambda (fPath) (shell-command (format "open \"%s\"" fPath)))  xah-file-list))
         ((string-equal system-type "gnu/linux")
          (mapc
           (lambda (fPath) (let ((process-connection-type nil)) (start-process "" nil "xdg-open" fPath))) xah-file-list))))))

    (add-hook 'dired-mode-hook '(lambda () 
                                  (local-set-key (kbd "E") 'xah-open-in-external-app)))
#+END_SRC

** Playing files with mpv
#+BEGIN_SRC emacs-lisp
(defvar jmm/mpv-program-alternates
  '(("mpvappendscrobble")
    ("mpv" "--audio-pitch-correction"))
  "Different media players and arguments to pass to them")

(defun josh/open-with-mpv (arg)
  (interactive "P")
  (let* ((thefiles (dired-get-marked-files))
         (process-connection-type nil)
	 (argind (cond ((not arg) 0)
		   ((listp arg) (floor (log (car arg) 4)))
		   ((numberp arg) arg)
		   (t 0)))
	 (mpvprog (nth argind jmm/mpv-program-alternates)))
    (apply 'start-process "" nil (append mpvprog thefiles))
    (message (format "Played %i files" (length thefiles)))))

(add-hook 'dired-mode-hook '(lambda ()
                              (local-set-key (kbd "J") 'josh/open-with-mpv)))
#+END_SRC
** git-annex
   I'm messing around with git-annex, and it's nice to be able to view
   locked files by their name and not as a giant symlink in dired.
#+BEGIN_SRC emacs-lisp
(use-package git-annex
  :defer 10
  :config
  (git-annex-dired-do-to-files "lock" "Annex: locked %d file(s)")
  (git-annex-dired-do-to-files "unlock" "Annex: unlocked %d file(s)")
  (define-key git-annex-dired-map "l" 'git-annex-dired-lock-files)
  (define-key git-annex-dired-map "u" 'git-annex-dired-unlock-files)
  (define-key git-annex-dired-map "t" 'jmm/dired-git-annex-tag)
  ;; git-annex.el kinda clobbers dired-marked-face and dired-flagged-face
  ;; This fixes that
  (eval-after-load "dired"
    '(progn
       (add-to-list 'dired-font-lock-keywords
		    (list "^[*].+ -> .*\\.git/annex/"
			  '("\\(.+\\)\\( -> .+\\)" (dired-move-to-filename) nil
			    (1 dired-marked-face)
			    (2 git-annex-dired-annexed-invisible))))
       (add-to-list 'dired-font-lock-keywords
		    (list "^[D].+ -> .*\\.git/annex/"
			  '("\\(.+\\)\\( -> .+\\)" (dired-move-to-filename) nil
			    (1 dired-flagged-face)
			    (2 git-annex-dired-annexed-invisible))))))
  :after (dired))
#+END_SRC
*** Make it easy to add metadata tags in git-annex

    Git-annex has a pretty cool ability to tag files and filter
    directory views based on metadata. It's kind of a pain to tag
    files, though, so here's a function that adds some autocompletion
    to tagging file.

#+BEGIN_SRC emacs-lisp
(defvar-local jmm/git-annex-directory-tags nil
  "Current git-annex tags set in the directory, as a list.")

(defun jmm/dired-git-annex-current-tags (file-list &optional intersection)
  "Get current git-annex tag for each file in FILE-LIST. With
  optional argument INTERSECTION, only show tags all files share in common."
  (let* ((metadata (with-output-to-string
		    (with-current-buffer
			standard-output
		      (apply #'process-file "git" nil t nil "annex" "metadata" "--json" file-list))))
	 (json-array-type 'list)
	 (jsonout (-map 'json-read-from-string (split-string metadata "\n" t))))
    (-reduce (if intersection '-intersection '-union) (--map (cdr (assoc 'tag (cdr (assoc 'fields it)))) jsonout))))

(defun jmm/dired-git-annex-tag (file-list tags &optional arg)
  "Add git-annex TAGS to each file in FILE-LIST.
Used as an interactive command, prompt for a list of tags for all
files, showing the current tags all files currently have in common."
  (interactive
   (let* ((files (dired-get-marked-files t current-prefix-arg))
	  (shared-tags (jmm/dired-git-annex-current-tags files t))
	  ;; Cache directory tags
	  (current-tags (or jmm/git-annex-directory-tags
			    (setq jmm/git-annex-directory-tags
				  (or (jmm/dired-git-annex-current-tags '("--all")) '("")))))
	  (crm-separator " ")
	  (crm-local-completion-map
	   (let ((map (make-sparse-keymap)))
	     (set-keymap-parent map crm-local-completion-map)
	     (define-key map " " 'self-insert-command)
	     map))
	  (tags (completing-read-multiple
		 "Tags: " (--map (concat it crm-separator) current-tags)
		 nil nil
		 (when shared-tags (mapconcat 'identity shared-tags " ")))))
     (setq jmm/git-annex-directory-tags (-union tags jmm/git-annex-directory-tags))
     (list files tags current-prefix-arg)))
  (let ((args (cl-loop for x in tags
		       append (list "-t" x))))
    (-each file-list
      (lambda (file)
	(apply #'call-process "git" nil nil nil "annex" "metadata" (append args (list file)))))
    (message (format "Tagged %d file(s)" (length file-list)))))
#+END_SRC

** Dired ranger
   dired-ranger (see [[https://github.com/Fuco1/dired-hacks][dired-hacks]]) adds some really convenient ways to
   copy and paste files between buffers. It's a lot easier than
   hitting ~C~ and scrolling through your find-file history looking
   for the right path to copy to.

#+BEGIN_SRC emacs-lisp
(use-package dired-ranger
  :after (dired)
  :ensure t
  :bind (:map dired-mode-map
	      ("[" . dired-ranger-copy)
	      ("]")
	      ("] c" . dired-ranger-paste)
	      ("] h" . jmm/dired-ranger-hardlink)
	      ("] s" . jmm/dired-ranger-symlink)
	      ("] r" . jmm/dired-ranger-relsymlink)
	      ("] m" . dired-ranger-move)
	      ))
#+END_SRC
*** Add more actions for dired ranger

    Sometimes I want to do things other than copy or move
    files. Sometimes I'd like to symlink, relative symlink, or
    hardlink files. These functions make that easier to do.

#+BEGIN_SRC emacs-lisp
(defmacro jmm/make-dired-ranger-action (newfuncname actionname functiontocall char)
  "Make dired-ranger paste commands, but for other things like
symlink, hardlink, relsymlink, etc."
  `(defun ,newfuncname (arg)
     ,(format "%s the items from copy ring to current directory.

With raw prefix argument \\[universal-argument], do not remove
the selection from the stack so it can be copied again.

With numeric prefix argument, %s the n-th selection from the
copy ring." (s-capitalize actionname) (s-downcase actionname))
     (interactive "P")
     (let* ((index (if (numberp arg) arg 0))
	    (data (ring-ref dired-ranger-copy-ring index))
	    (files (cdr data))
	    (target-directory (dired-current-directory))
	    (pasted-files 0))
       (--each files (when (file-exists-p it)
		       (,functiontocall it target-directory)
		       (cl-incf pasted-files)))
       (dired-ranger--revert-target ,char target-directory files)
       (unless arg (ring-remove dired-ranger-copy-ring 0))
       (message (format ,(format "%sed %%d/%%d item%%s from copy ring." (s-capitalize actionname))
			pasted-files
			(length files)
			(if (> (length files) 1) "s" ""))))))

(jmm/make-dired-ranger-action jmm/dired-ranger-hardlink "Hardlink" dired-hardlink ?H)
(jmm/make-dired-ranger-action jmm/dired-ranger-symlink "Symlink" make-symbolic-link ?S)
(jmm/make-dired-ranger-action jmm/dired-ranger-relsymlink "Relsymlink" dired-make-relative-symlink ?R)
#+END_SRC

* Tramp
#+begin_src emacs-lisp
;; (eval-when-compile
;;   (require 'tramp))
#+end_src
** Proxies. Allow sudo
#+begin_src emacs-lisp
;; (set-default 'tramp-default-proxies-alist nil)
;; (add-to-list 'tramp-default-proxies-alist '((and (string-match system-name (tramp-file-name-host (car target-alist))) "DONTMATCHMEPLEASE") "\\`root\\'" "/ssh:%h:"))
#+end_src

** Kill Tramp buffers
   Sometimes, having Tramp buffers open will weirdly cause other Emacs
   functions to fail or load slowly. For example, if you've got a
   bunch of remote Tramp buffers open, using helm sometimes slows
   down, or sometimes using magit fails. I'm not sure why. Often I'd
   just like to kill all remote buffers so I don't have to wait for
   connections to be brought back up again. This function does that.
#+BEGIN_SRC emacs-lisp
  (defun josh/kill-tramp-buffers ()
    "Kill TRAMP buffers. This is useful if, for whatever reason, remote buffers are either slowing down emacs or making some commands act strangely."
    (interactive)
    (let ((i 0))
      (mapc (lambda (buff)
              (with-current-buffer buff
                (when (tramp-tramp-file-p default-directory)
                  (kill-buffer buff)
                  (setq i (1+ i)))))
            (buffer-list))
      (message (format "Killed %d buffer%s" i (if (eq i 1) "" "s")))))

  (bind-key "<f9> t" 'josh/kill-tramp-buffers)
#+END_SRC
* Notmuch
  Notmuch is an email interface I started using to replace Gnus. It's
  got a couple of main selling points. First is that things are
  organized into tags instead of folders, so messages can have more
  than one category. The second is that it uses Xapian for searching,
  making full text search really, really fast.

#+BEGIN_SRC emacs-lisp
(use-package notmuch
    :bind (("C-c n" . notmuch-hello)
	   ("C-c N" . notmuch-search)
	   :map notmuch-common-keymap
	   ("g" . notmuch-refresh-this-buffer)
	   :map notmuch-show-mode-map
	   ("b" . josh/notmuch-send-html-to-browser)
	   ("B" . notmuch-show-resend-message)
	   ("o" . jmm/notmuch-show-open-in-gmail)
	   ))
(use-package org-notmuch
  :after (notmuch))
#+END_SRC

  Here's some stuff related to sending email (although not directly related to notmuch).
  I'm currently using [[http://msmtp.sourceforge.net/][msmtp]] to automatically handle sending email from different accounts.

#+BEGIN_SRC emacs-lisp
(setq send-mail-function 'sendmail-send-it
      sendmail-program "/usr/bin/msmtp"
      mail-specify-envelope-from t
      message-sendmail-envelope-from 'header
      mail-envelope-from 'header)

(require 'starttls)
;; use org structures and tables in message mode
;; Thanks, pragmaticemacs!
(add-hook 'message-mode-hook 'turn-on-orgtbl)
(add-hook 'message-mode-hook 'turn-on-orgstruct++)
#+END_SRC

When using ~shr~ to render HTML, sometimes the colors come out weird. This makes it more readable.
#+BEGIN_SRC emacs-lisp
(setq shr-color-visible-luminance-min 70)
#+END_SRC

Function to send HTML part to the browser
#+BEGIN_SRC emacs-lisp
(defun josh/notmuch-send-html-to-browser ()
  "Search for \"text/html\" in the buffer and open it with `notmuch-show-view-part'"
  (interactive)
  (save-excursion
    (when (search-forward "text/html" nil t)
      (notmuch-show-view-part))))
#+END_SRC

** Open an email with gmail

Gmail does some nice stuff occasionally. One of the things I like is
that it caches loading of external images, so senders can't track when
you've opened some mail. Of course, /Gmail/ can still track you, so
it's up to you who you want tracking you (or, you can decide not to
see images in emails).

This function opens an email in Gmail. For most HTML files I should
use ~josh/notmuch-send-html-to-browser~ though.

#+BEGIN_SRC emacs-lisp
(defvar jmm/gmail-to-user-id-alist '(("tag0" . 0)
				     ("tag1" . 1))
  "This should be an alist of tags and their associated user number in gmail.
For example, if mail to your school account is user 0,
  specify (\"school\" . 0) as an item in the alist")

(defun jmm/notmuch-show-open-in-gmail ()
  "Open the displayed message in gmail"
  (interactive)
  (let ((msgid (notmuch-show-get-message-id t))
	(userid (or (cdr (assoc (car (-intersection (mapcar 'car jmm/gmail-to-user-id-alist)
						(notmuch-show-get-tags)))
				jmm/gmail-to-user-id-alist))
		    0)))
    (browse-url (concat (format "https://mail.google.com/mail/u/%d/?ibxr=0#search/" userid)
			(url-hexify-string (format "rfc822msgid:%s" msgid))))))
#+END_SRC
** Store Org mode links to sent messages

Sometimes when sending reply emails, I want to track the email in Org mode.
This function stores an Org mode link to the email (viewed in notmuch), any time I send an email.

#+BEGIN_SRC emacs-lisp
(defun jmm/message-send-store-notmuch-link ()
  "Store an org mode notmuch link to the message after sending."
  (let ((link (concat "notmuch:id:" (substring (message-fetch-field "message-id") 1 -1)))
	(subject (message-fetch-field "subject")))
    (push (list link subject) org-stored-links)))

(add-hook 'message-sent-hook 'jmm/message-send-store-notmuch-link)
#+END_SRC
* Elfeed
  [[https://github.com/skeeto/elfeed][elfeed]] is an RSS reader with a similar interface to [[https://notmuchmail.org/][notmuch]]. I used
  to use Gnus to read RSS, but elfeed is nice in that it doesn't block
  emacs when loading feeds. Also, after learning how to use notmuch,
  the elfeed interface started making a lot of sense.

  Pro tip: Use bookmarks (especially Helm bookmarks) to save elfeed
  searches. This gives you similar functionality to notmuch saved searches.

#+BEGIN_SRC emacs-lisp
(defun elfeed-toggle-images ()
  "Toggle the display of images"
  (interactive)
  (setq shr-inhibit-images (not shr-inhibit-images))
  (elfeed-show-refresh))

(defun elfeed-temporarily-inhibit-images ()
    "Inhibit the display of images, but don't set `shr-inhibit-images'"
    (interactive)
    (let ((shr-inhibit-images t))
      (elfeed-show-refresh)))

(defun josh/save-elfeed ()
    "Just call `elfeed-db-save'. We just need an interactive function to bind to a key"
    (interactive)
    (if (elfeed-db-save)
	(message "Saved")))

(use-package elfeed
	       :bind (("C-x w" . elfeed))
	       :config
	       (define-key elfeed-search-mode-map (kbd "C-x C-s") 'josh/save-elfeed)
	       (define-key elfeed-show-mode-map "I" 'elfeed-toggle-images)
	       (define-key elfeed-show-mode-map "i" 'elfeed-temporarily-inhibit-images))
#+END_SRC

* Sawfish
  Automatically load .jl files as sawfish (not Julia)
#+begin_src emacs-lisp
  (when (require 'sawfish nil 'noerror)
    (setq auto-mode-alist (cons '("\\.sawfishrc$"  . sawfish-mode) auto-mode-alist)
          auto-mode-alist (cons '("\\.jl$"         . sawfish-mode) auto-mode-alist)
          auto-mode-alist (cons '("\\.sawfish/rc$" . sawfish-mode) auto-mode-alist)))

#+end_src
* Helm
#+begin_src emacs-lisp
(require 'helm-config)
(bind-key "C-c h" 'helm-mini)
(use-package helm-mode
  :diminish helm-mode
  :bind (("M-x" . helm-M-x)
	 ("C-x b" . helm-buffers-list)
	 ("C-x C-f" . helm-find-files)
	 ("C-x f" . helm-for-files)
	 ("C-x C-i" . helm-semantic-or-imenu)
	 ("M-x" . helm-M-x)
	 ("M-y" . helm-show-kill-ring)
	 ("M-s o" . helm-occur)
	 ("M-g s" . helm-do-grep)
	 ("M-g b" . helm-resume)
	 ("C-c SPC" . helm-all-mark-rings)
	 ("C-c b" . helm-bookmarks))
  :init
  (setq helm-ff-newfile-prompt-p nil)
  :config
  (bind-key "C-c j" 'helm-ff-dired helm-map)
  (bind-key "C-c J" 'helm-ff-xterm-directory helm-map)
  (bind-key "C-c C-m" 'helm-ff-mpv helm-map)
  (progn (mapc (lambda (x) (add-to-list 'helm-completing-read-handlers-alist
                               (list x)))
      (list 'dired-do-rename
            'dired-do-copy
            'dired-do-delete
            'dired-do-symlink
            'dired-create-directory
            'find-file))
         (helm-mode 1)))
#+end_src
** Other Helm actions I find useful
   I like being able to open an xterm or quickly jump to dired with helm.
#+begin_src emacs-lisp
(defun helm-ff-dired ()
  "Run open file externally command action from `helm-source-find-files'."
  (interactive)
  (when helm-alive-p
    (helm-quit-and-execute-action 'helm-point-file-in-dired)))

(defun helm-xterm-directory (file)
  "Open an xterm starting in FILE's directory."
  (start-xterm (if (file-directory-p file)
                   file
                 (file-name-directory file))))

(defun helm-ff-xterm-directory ()
  "Open xterm on file's directory"
  (interactive)
  (when helm-alive-p
    (helm-quit-and-execute-action 'helm-xterm-directory)))
#+end_src
** Helm locate
   I like spaces to narrow locate results, instead of having to type
   in ".*" to search for separate strings.
#+BEGIN_SRC emacs-lisp
  (setq helm-locate-command "locate %s -e -A --regex %s")
#+END_SRC
** Helm MPV
   I like being able to play a bunch of files with mpv, and sometimes
   I like to scrobble them to last.fm. I have a script called
   "scrobblempv2" in my path that enables scrobbling of tracks.
#+BEGIN_SRC emacs-lisp
  (defun helm-mpv (_ignore)
      "Play some files with mpv. Given a prefix, run scrobblempv2, a
    script made to enable plugins for mpv scrobbling.
  Given two prefixes, append file to the current playlist."
      (let* ((files (helm-marked-candidates :with-wildcard t))
             (len (length files))
             (mpv (cond
                   ((equal helm-current-prefix-arg '(16)) "scrobblempv2")
                   ((equal helm-current-prefix-arg '(4)) "mpvappendscrobble")
                   (t "mpv"))))
        (with-helm-display-marked-candidates
          helm-marked-buffer-name
          (mapcar #'(lambda (f)
                      (if (file-directory-p f)
                          (concat (helm-basename f) "/")
                        (helm-basename f)))
                  files)
          (apply 'start-process "scrobblempv2" " mpv process" mpv files))))

  (defun helm-ff-mpv ()
    "Open a file with mpv."
    (interactive)
    (when helm-alive-p
      (helm-quit-and-execute-action 'helm-mpv)))
#+END_SRC
** helm-swoop
Set up hotkeys and stuff for helm-swoop
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
             :bind (("M-i" . helm-swoop)
                    ("M-I" . helm-swoop-back-to-last-point)
                    ("C-c M-i" . helm-multi-swoop)
		    ("C-c d" . helm-multi-swoop-dired)
                    ("C-x M-i" . helm-multi-swoop-all)
		    :map isearch-mode-map
		    ;; When doing isearch, hand the word over to helm-swoop
		    ("M-i" . helm-swoop-from-isearch)
		    :map helm-swoop-map
		    ;; From helm-swoop to helm-multi-swoop-all
		    ("M-i" . helm-multi-swoop-all-from-helm-swoop)))
#+END_SRC

Make an easy way to find files in open dired buffers

#+BEGIN_SRC emacs-lisp
;; (require 'helm-swoop)
(defun helm-multi-swoop-dired (&optional $query)
  "Applies all dired-mode buffers to helm-multi-swoop"
  (interactive)
  (helm-multi-swoop-by-mode 'dired-mode $query))
#+END_SRC

** helm-descbinds
   Describe bindings.
#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :defer t
    :bind (("C-h b" . helm-descbinds)
           ("C-h w" . helm-descbinds)))
#+END_SRC
** helm-org-rifle
   Helm-org-rifle is a really nice way to swoop through org-mode
#+BEGIN_SRC emacs-lisp
(use-package helm-org-rifle
  :after (org)
  :bind (("C-c R" . helm-org-rifle-occur)
         ("C-c r" . helm-org-rifle)
	 :map helm-org-rifle-map
	 ("C-c C-l" . jmm/helm-org-rifle-insert-link-map-action)
	 ("C-c l" . jmm/helm-org-rifle-copy-link-map-action)))
#+END_SRC
*** Link to things with helm-org-rifle
    Helm-org-rifle is a great way to find entries, and I find it much
    faster than using an agenda search. Often, I want to add
    references from one entry to another. These functions allow
    copying and directly inserting links from helm-org-rifle.

#+BEGIN_SRC emacs-lisp
(defun jmm/helm-org-rifle-insert-link (candidate)
  "Insert a link to the current CANDIDATE in the current buffer."
  (-let (((buffer . pos) candidate))
    (helm-attrset 'new-buffer nil)  ; Prevent the buffer from being cleaned up
    (insert (with-current-buffer buffer
	      (save-excursion
		(goto-char pos)
		(org-store-link t))))))

(defun jmm/helm-org-rifle-insert-link-map-action ()
  "Exit Helm buffer and call `jmm/helm-org-rifle-insert-link' with selected candidate."
  (interactive)
  (with-helm-alive-p
    (helm-exit-and-execute-action 'jmm/helm-org-rifle-insert-link)))

(defun jmm/helm-org-rifle-copy-link (candidate)
  "Copy a link to the current CANDIDATE."
  (-let (((buffer . pos) candidate))
    (helm-attrset 'new-buffer nil)  ; Prevent the buffer from being cleaned up
    (with-current-buffer buffer
      (save-excursion
	(goto-char pos)
	(call-interactively 'org-store-link)))))

(defun jmm/helm-org-rifle-copy-link-map-action ()
  "Exit Helm buffer and call `jmm/helm-org-rifle-copy-link' with selected candidate."
  (interactive)
  (with-helm-alive-p
    (helm-exit-and-execute-action 'jmm/helm-org-rifle-copy-link)))
#+END_SRC

* Magit
  [[https://magit.vc/][Magit]] is probably the best [[http://stackoverflow.com/a/6976506][git porcelain]] out there. I've been using it for a while.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)
	 ("C-x M-g" . magit-dispatch-popup)
	 :map dired-mode-map
	 ("C-c C-l" . magit-dired-log)))
#+END_SRC

* Flycheck
  [[http://www.flycheck.org/en/latest/][Flycheck]] is a pretty good syntax checker for Emacs. Right now, I
  mostly use it to lint JavaScript files. I've also used it a couple
  times with Emacs lisp packages.
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :commands (flycheck-mode global-flycheck-mode)
  :config
  ;; Disable jshint. I use eslint
  ;; Also disable Emacs lisp checkdoc stuff for now
  (setq-default flycheck-disabled-checkers
		(append flycheck-disabled-checkers
			'(javascript-jshint emacs-lisp-checkdoc))))
#+END_SRC
** Use a local eslint from ~node_modules~ before a global one
   From [[http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable]]

#+BEGIN_SRC emacs-lisp
(defun my/use-eslint-from-node-modules ()
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint (and root
                      (expand-file-name "node_modules/eslint/bin/eslint.js"
                                        root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))

(add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+END_SRC

* Useful, but unnecessary, functions
** Word counting
#+begin_src emacs-lisp
(defun word-count nil "Count words in buffer" (interactive)
  (shell-command-on-region (point-min) (point-max) "wc -w"))
#+end_src

** Aliases
#+begin_src emacs-lisp
(defun afm ()				;Shorter than typing auto-fill-mode
  (interactive)
  (auto-fill-mode))

(defun ttl ()
  (interactive)
  (toggle-truncate-lines))
#+end_src

** Killing buffers
#+begin_src emacs-lisp
;; Display buffers and kill them
(defun kill-some-buffers2 (&optional list)
  "Kill some buffers.  Asks the user whether to kill each one of them.
Non-interactively, if optional argument LIST is non-nil, it
specifies the list of buffers to kill, asking for approval for each one."
  (interactive)
  (if (null list)
      (setq list (buffer-list)))
  (while list
    (let* ((buffer (car list))
	   (name (buffer-name buffer)))
      (and name				; Can be nil for an indirect buffer
					; if we killed the base buffer.
	   (not (string-equal name ""))
	   (/= (aref name 0) ?\s)
	   (switch-to-buffer name)
	   (kill-buffer-ask buffer)))
    (setq list (cdr list))))
(bind-key "C-x M-k" 'kill-some-buffers2)
#+end_src


#+begin_src emacs-lisp
(add-hook 'artist-mode-hook
 (lambda ()
   (define-key artist-mode-map [remap artist-next-line] 'picture-move-down)
   ))
#+end_src
** Viewing and killing buffers
#+begin_src emacs-lisp
(defun view-and-kill-some-buffers (&optional list)
  "View and kill buffers"
  (interactive)
  (if (null list)
      (setq list (buffer-list)))
  (while list
    (let* ((buffer (car list))
	   (name (buffer-name buffer)))
      (switch-to-buffer buffer)
      (and name				; Can be nil for an indirect buffer
					; if we killed the base buffer.
	   (not (string-equal name ""))
	   (/= (aref name 0) ?\s)
	   (kill-buffer-ask buffer)))
    (setq list (cdr list))))
#+end_src

** What I do when editing some text files
#+begin_src emacs-lisp
(defun txt-stuff ()
  "A lot of stuff you do when writing in text files"
  (interactive)
  (auto-fill-mode 1)
  (use-hard-newlines 1 'always))
#+end_src

#+BEGIN_SRC emacs-lisp
(defun journal-stuff ()
  "A bunch of commands used when writing a daily journal."
  (interactive)
  (insert (replace-regexp-in-string "\.txt" "" (buffer-name))
          "\n"
          "(Written ")
  (ignore-errors (org-time-stamp '(16)))
  (insert ")\n\n")
  (text-scale-set -2)
  (txt-stuff))
#+END_SRC

** Starting an Xterm in current directory
#+begin_src emacs-lisp
(defun start-xterm (&optional dirpath)
    "Start a new xterm in the current directory. SSH if necessary"
    (interactive)
    (let ((path (if dirpath dirpath (expand-file-name (or (and (eq major-mode 'dired-mode)
                                                               (dired-current-directory))
                                                          default-directory)))))
      "Return the local portion of a path.

  If PATH is local, return it unaltered.
  If PATH is remote, return the remote diretory portion of the path."
      (if (tramp-tramp-file-p path)
          (let ((loc (tramp-file-name-localname (tramp-dissect-file-name path)))
                (host (tramp-file-name-host (tramp-dissect-file-name path))))
            (start-process "xterm" " xterm-processes" "xterm" "-T" (format "%s: %s" host loc) "-e" (format "ssh -t %s 'cd %s; bash'" host loc)))
        (start-process "xterm" " xterm-processes" "xterm" "-T" path "-e" (format "cd \"%s\"; zsh" path)))))
(bind-key "<f9> x" 'start-xterm)
#+end_src

** Copy the path
#+begin_src emacs-lisp
(defun file-name-copy-path ()
  "Copy the path the of the of the current buffer"
  (interactive)
  (kill-new (message "%s" (buffer-file-name))))
(bind-key "<f9> c" 'file-name-copy-path)
#+end_src

** Word wrapping
#+begin_src emacs-lisp
 (defun ww ()
  "Set word wrapping"
  (interactive)
  (setq word-wrap (if word-wrap nil t)))
#+end_src
** Half Term
#+begin_src emacs-lisp
(defun run-half-term ()
   "Run a shell in half a window."
   (interactive)
   (split-window-vertically nil)
   (other-window 1)
   (term "/bin/bash")
   (rename-uniquely)
   (other-window -1))

(bind-key "C-x 4 t" 'run-half-term)
#+end_src
** Search Gregg Shorthand Dictionary
#+begin_src emacs-lisp
(defun gsd ()
  (interactive)
    (find-file-read-only "~/Downloads/gregg/gsd.txt")
    (helm-occur)
    (if (and (require 'pdf-tools nil 'noerror)
	     (require 'pdf-isearch nil 'noerror))
	(progn
	  (setq gsd-word (word-at-point))
	  (setq gsd-page (string-to-number (substring (what-page) 5 8)))
	  (find-file-read-only "~/Downloads/gregg/gsd.pdf")
	  (pdf-view-goto-page gsd-page)
	  (setq gsd-matches (pdf-isearch-search-page gsd-word))
	  (pdf-isearch-hl-matches (car gsd-matches) gsd-matches t))
      (start-process "evince-gsd" " gsd-processes" "evince"
		     (concat "--page-label="
			     (number-to-string (- (string-to-number
						   (substring (what-page) 5 8))
						  12)))
		     "/home/jm3/Downloads/gregg/gsd.pdf")))

(bind-key "<f9> g" 'gsd)
#+end_src
** Window Dedication
#+begin_src emacs-lisp
;; http://dfan.org/blog/2009/02/19/emacs-dedicated-windows/
(defun toggle-current-window-dedication ()
 (interactive)
 (let* ((window    (selected-window))
        (dedicated (window-dedicated-p window)))
   (set-window-dedicated-p window (not dedicated))
   (message "Window %sdedicated to %s"
            (if dedicated "no longer " "")
            (buffer-name))))

(bind-key [pause] 'toggle-current-window-dedication)
#+end_src
** Chinese Cangjie 5 input
   I created a quail package for Cangjie version 5 using libcangjie's
   dictionary.  The main advantage to using it over the built-in
   =chinese-cns-tsangchi= or =chinese-b5-tsangchi= is that this method
   allows you to type simplified Chinese characters.

#+begin_src emacs-lisp
  (register-input-method
   "Cangjie5" "Chinese-BIG5" 'quail-use-package
   "C5" "Cangjie version 5"
   "cangjie5.el")
#+end_src

   A quick key to help look up Cangjie codes for characters I don't know.
#+begin_src emacs-lisp
  (bind-key "<f9> s" 'quail-show-key)
#+end_src
** Auto fill line
   Sometimes I want to wrap a line, but pressing =M-q= will treat
   everything as one huge paragraph, messing up the structure.
   This simple function acts like we temporarily turn on
   auto-fill-mode, wrap the line, and then turn it off.

#+begin_src emacs-lisp
  (defun josh/fill-line ()
    "Wrap the line"
    (interactive)
    (save-excursion
      (end-of-line)
      (funcall normal-auto-fill-function)))

  (bind-key "M-Q" 'josh/fill-line)
#+end_src
** Switch to scratch buffer
   A quick hotkey for switching to the scratch buffer.
#+begin_src emacs-lisp
  (defun switch-to-scratch ()
    "Switch to scratch"
    (interactive)
    (switch-to-buffer "*scratch*"))
  
  (bind-key "C-h C-s" 'switch-to-scratch)
#+end_src
** Comment a copy
   Sometimes when I'm debugging something, I'll want to make
   modifications to the line I'm working on, but keep a copy of it
   right above. This function allows me to automate that.
#+BEGIN_SRC emacs-lisp
  (defun jmm/comment-a-copy ()
      "Add a commented-out line above the current one.

  If the region is active, add a commented-out version of the region above the region"
      (interactive)
      (save-excursion
          (let* ((beg (if (use-region-p) (min (mark) (point)) (line-beginning-position)))
                 (end (if (use-region-p) (max (mark) (point)) (line-end-position)))
                 (selection (buffer-substring beg end)))
            (goto-char beg)
            (push-mark)
            (insert selection)
            (comment-region (mark) (point)))))

  (bind-key "C-c C" 'jmm/comment-a-copy)
#+END_SRC
** Find the latest file in a directory
   Decent function for finding the most recent file in a
   directory. For example, if I wanted to get the most recently
   downloaded PDF in "~/Downloads"
#+BEGIN_SRC emacs-lisp
(defun josh/latest-file (path glob)
  "Get the latest file in PATH matching the regex GLOB"
  (caar
   (sort (mapcar (lambda (file)
		  (cons (car file) (float-time (file-attribute-modification-time file))))
		(directory-files-and-attributes path 'full glob 'nosort))
	(lambda (file1 file2) (> (cdr file1) (cdr file2))))))
#+END_SRC
** Unfill Paragraph
   From https://www.emacswiki.org/emacs/UnfillParagraph
#+BEGIN_SRC emacs-lisp
;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    ;; Unhyphenate --Josh
    (when region
      (save-excursion
	(while (re-search-forward "-\n" (region-end) t)
	  (replace-match ""))))
    (fill-paragraph nil region)))
(define-key global-map (kbd "C-M-q") 'unfill-paragraph)
#+END_SRC

* Emacs Rocks
  Things I got from watching "Emacs Rocks"
** Multiple Cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
	 ("C->" . mc/mark-next-like-this)
	 ("C-<" . mc/mark-previous-like-this)
	 ("C-M-<" . mc/mark-all-like-this-dwim)
	 ("C-<mouse-1>" . mc/add-cursor-on-click))
  :init
  (unbind-key "C-<down-mouse-1>"))
#+end_src
*** Inserting letters for each cursor
    Basically exactly like ~mc/insert-numbers~ but for letters.
#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors-core)

  (defun mc/insert-letters (arg)
    "Insert increasing letters for each cursor, starting at 0 or ARG."
    (interactive "cStart at character: ")
    (setq mc--insert-letters-letter (or arg ?a))
    (mc/for-each-cursor-ordered
     (mc/execute-command-for-fake-cursor 'mc--insert-letter-and-increase cursor)))

  (defvar mc--insert-letters-letter 0)

  (defun mc--insert-letter-and-increase ()
    (interactive)
    (insert (char-to-string mc--insert-letters-letter))
    (setq mc--insert-letters-letter (1+ mc--insert-letters-letter)))
#+END_SRC
*** Keymap for multiple-cursor commands
    Taken from http://endlessparentheses.com/multiple-cursors-keybinds.html
#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'endless/mc-map)
  ;; C-x m is usually `compose-mail'. Bind it to something
  ;; else if you use this command.
  (define-key ctl-x-map "m" 'endless/mc-map)

  ;;; Really really nice!
  (define-key endless/mc-map "i" #'mc/insert-numbers)
  (define-key endless/mc-map "h" #'mc-hide-unmatched-lines-mode)
  (define-key endless/mc-map "a" #'mc/mark-all-like-this)

  ;;; Occasionally useful
  (define-key endless/mc-map "d"
    #'mc/mark-all-symbols-like-this-in-defun)
  (define-key endless/mc-map "r" #'mc/reverse-regions)
  (define-key endless/mc-map "s" #'mc/sort-regions)
  (define-key endless/mc-map "l" #'mc/edit-lines)
  (define-key endless/mc-map "\C-a"
    #'mc/edit-beginnings-of-lines)
  (define-key endless/mc-map "\C-e"
    #'mc/edit-ends-of-lines)
#+END_SRC
*** Disable primary selection for multiple cursors
    Setting ~x-select-enable-primary~ allows me to paste into emacs from an xterm selection using "~C-y~" (yank)
    A problem, though, is that it breaks ~kill-ring-save~ yanking with multiple-cursors
    You can still paste from the X primary selection using middle click

    But since I want to copy from dired using ~w~ and paste into
    xterm, I'll only disable ~x-select-enable-primary~ while using multiple cursors.

#+BEGIN_SRC emacs-lisp
(add-hook 'multiple-cursors-mode-enabled-hook (lambda () (setq select-enable-primary nil)))
(add-hook 'multiple-cursors-mode-disabled-hook (lambda () (setq select-enable-primary t)))
#+END_SRC

** Expand Region
#+begin_src emacs-lisp
  (use-package expand-region
               :bind ("C-=" . er/expand-region))
#+end_src
** Ace Jump Mode
#+begin_src emacs-lisp
  (use-package ace-jump-mode
               :disabled
               :bind (("C-0" . ace-jump-mode)
                      ("C-x C-SPC" . ace-jump-mode-pop-mark))
               :init (progn
                       ;; To set to only use lowercase
                       (setq ace-jump-mode-case-fold t)
                       (setq ace-jump-mode-scope 'frame)))
  ;; (setq ace-jump-mode-move-keys (loop for i from ?a to ?z collect i))
#+end_src
*** Ace Jump Zap
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-zap
  :ensure t :defer t
  :bind
  (("M-z" . ace-jump-zap-up-to-char-dwim)
   ("M-Z" . ace-jump-zap-to-char-dwim)))
#+END_SRC
*** ace-mc
    My own package! Check it out [[https://github.com/mm--/ace-mc][here]].
    It basically makes adding multiple cursors easier.
#+BEGIN_SRC emacs-lisp
(use-package ace-mc
  :ensure t
  :bind
  (("C-)" . ace-mc-add-multiple-cursors)
   ("C-M-)" . ace-mc-add-single-cursor)))
#+END_SRC
** Avy
   [[https://github.com/abo-abo/avy/][Avy]] is like ace-jump-mode, but apparently better updated and with
   some newer features. I haven't really gotten around to using it
   instead of ace-jump-mode yet, but I'm trying to see what it has to offer.
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind* (("C-'" . avy-goto-char-timer)
	  ("C-0" . avy-goto-word-1))
  :bind (("C-:" . avy-goto-char-2)
	 ("M-g w" . avy-goto-word-1)
	 :map isearch-mode-map
	 ("C-'" . avy-isearch))
  :init (setq avy-keys (number-sequence ?a ?z)
	      avy-style 'at-full
	      avy-background t
	      avy-timeout-seconds 0.3)
  :config
  (add-to-list 'avy-dispatch-alist
	       '(?M . jmm/avy-action-add-mc)))
#+END_SRC

You can add a multiple cursor by customizing
~avy-dispatch-alist~. Here I define a function that adds a multiple
cursor to an avy candidate. The way you use it is as follows: Use your
favorite avy jump technique (~avy-goto-char-timer~ or
~avy-goto-word-1~ for example), and before pressing the candidate key,
press capital ~M~. Then press the candidate key. This will leave your
cursor in place but add a multiple cursor to the candidate location.

One caveat is that you /need/ to have multiple candidates to use
~avy-dispatch-alist~. If there's only one candidate, you'll
immediately jump to it without giving you a chance to activate the ~M~
dispatch action.
#+BEGIN_SRC emacs-lisp
(defun jmm/avy-action-add-mc (pt)
  "Add multiple cursor at PT."
  (save-excursion
    (goto-char pt)
    (mc/create-fake-cursor-at-point)
    (mc/maybe-multiple-cursors-mode)))
#+END_SRC

* Other modes
** Enriched Mode
#+begin_src emacs-lisp
(add-hook 'enriched-mode-hook
 (lambda ()
   (define-key enriched-mode-map [remap newline-and-indent] nil)
   (define-key enriched-mode-map "\C-m" nil)
   (define-key enriched-mode-map [remap move-beginning-of-line] nil)
   ))
#+end_src
** Java Mode
#+begin_src emacs-lisp
(add-hook 'java-mode-hook
	  (lambda ()
	    (c-set-style "java")))
#+end_src
** Ledger
#+begin_src emacs-lisp
(use-package ledger
  :commands ledger-mode
  :ensure ledger-mode)
#+end_src
** Swank-js
#+begin_src emacs-lisp
  (add-hook 'css-mode-hook
             (lambda ()
               (define-key css-mode-map "\M-\C-x" 'slime-js-refresh-css)
               (define-key css-mode-map "\C-c\C-r" 'slime-js-embed-css)))
#+end_src
#+begin_src emacs-lisp
  (bind-key [f5] 'slime-js-reload)
  ;; (add-hook 'js-mode-hook
  ;;           (lambda ()
  ;;             (js2-minor-mode 1)
  ;;             (auto-complete-mode 1)))
#+end_src
** js2-mode
   Use js2-mode by default
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
#+end_src
   I prefer less indentation.
#+begin_src emacs-lisp
  (setq-default js2-basic-offset 4)
#+end_src
   I'm checking style/semicolons/whatever with eslint, so I don't want js2-mode to tell me about it.
#+BEGIN_SRC emacs-lisp
(setq-default js2-strict-missing-semi-warning nil)
(setq-default js2-mode-show-parse-errors nil)
(setq-default js2-mode-show-strict-warnings nil)
#+END_SRC
** Tern.js for Javascript
   [[http://ternjs.net/][Tern]] seems to be a pretty cool tool much like ctags.

   It's able to find the definitions of functions and variables in
   your javascript files as well as tell you the type of variable.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/Downloads/tern/emacs")
(use-package tern
  :commands tern-mode
  :config (add-hook 'js2-mode-hook (lambda () (tern-mode t))))
#+end_src
** Projectile
   Projectile is a neat library that makes it easy to deal with
   various tasks in a project. For example, it makes it easy to switch
   to project-related buffers or to search all buffers.

   This configuration also turns on ~helm-projectile~ bindings by default.
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :bind-keymap ("C-c p" . projectile-command-map)
  :bind (:map projectile-command-map
	      ("x x" . jmm/projectile-start-xterm))
  :config
  (progn
    (projectile-global-mode)
    ;; Easily switch between .html, .js, and .css
    (add-to-list 'projectile-other-file-alist '("html" "css" "js"))
    (add-to-list 'projectile-other-file-alist '("js" "css" "html"))
    (setq projectile-svn-command "find . -type f -not -iwholename '*.svn/*' -print0")
    (setq projectile-completion-system 'helm-comp-read)))

(use-package helm-projectile
  :ensure t
  :after projectile
  :config
  (helm-projectile-toggle 1))
#+end_src
*** Start xterm in projectile root
#+BEGIN_SRC emacs-lisp
(defun jmm/projectile-start-xterm ()
  "Start an xterm in the projectile root"
  (interactive)
  (start-xterm (projectile-project-root)))
#+END_SRC

** Yasnippet
   So I can have recursive snippets.
#+begin_src emacs-lisp
(use-package yasnippet
  :if (not noninteractive)
  :ensure t
  :commands (yas-global-mode yas-minor-mode)
  :init (setq yas-triggers-in-field t))
#+end_src
** Switch window
   A visual way to switch windows. Kind of like ace-jump, but for windows.
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :disabled t
    :bind ("C-x o" . switch-window))
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
             :ensure t
             :config
             (progn (require 'smartparens-config)
                    (smartparens-global-mode t)
		    (fset 'my-wrap-with-paren "\C-](")

                    (show-smartparens-global-mode t))

	     ;; Mostly just the default bindings
	     :bind (:map smartparens-mode-map
			 ("C-M-f" . sp-forward-sexp)
			 ("C-M-b" . sp-backward-sexp)

			 ("C-M-d" . sp-down-sexp)
			 ("C-M-a" . sp-backward-down-sexp)
			 ("C-S-a" . sp-beginning-of-sexp)
			 ("C-S-d" . sp-end-of-sexp)
			 
			 ("C-M-e" . sp-up-sexp)
			 ("C-M-u" . sp-backward-up-sexp)
			 ("C-M-t" . sp-transpose-sexp)
			 ("C-M-n" . sp-next-sexp)
			 ("C-M-p" . sp-previous-sexp)

			 ("C-M-k" . sp-kill-sexp)
			 ("C-M-w" . sp-copy-sexp)
			 ;; ("M-<delete>" . sp-unwrap-sexp)
			 ;; I usually use backword kill
			 ;; ("M-<backspace>" . sp-backward-unwrap-sexp)
			 ("C-<right>" . sp-forward-slurp-sexp)
			 ("C-<left>" . sp-forward-barf-sexp)
			 ("C-M-<left>" . sp-backward-slurp-sexp)
			 ("C-M-<right>" . sp-backward-barf-sexp)

			 ("M-D" . sp-splice-sexp)
			 ("C-M-<delete>" . sp-splice-sexp-killing-forward)
			 ("C-M-<backspace>" . sp-splice-sexp-killing-backward)
			 ("C-S-<backspace>" . sp-splice-sexp-killing-around)

			 ("C-]" . sp-select-next-thing-exchange)
			 ("C-<left_bracket>" . sp-select-previous-thing)
			 ("C-M-]" . sp-select-next-thing)
			 ("C-(" . my-wrap-with-paren)
			 
			 ("M-F" . sp-forward-symbol)
			 ("M-B" . sp-backward-symbol)))
#+END_SRC
** Ag
#+BEGIN_SRC emacs-lisp
  (use-package helm-ag
    :bind ("<f9> a" . helm-ag))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :bind ("<f9> A" . ag-project-at-point)
    :init
    (progn
      (setq ag-highlight-search t)))
#+END_SRC
** Wgrep
   Wgrep is pretty cool. It's like wdired, but for grep (duh),
   allowing you to make changes directly in a \*grep\* buffer.
#+BEGIN_SRC emacs-lisp
(use-package wgrep
  :ensure t
  :init
  (progn
    (setq wgrep-auto-save-buffer t)
    (setq wgrep-enable-key "r"))
  :after (grep))
#+END_SRC
** nxml mode
   Turn off flyspell mode with nxml, as for whatever reason it hangs.
#+BEGIN_SRC emacs-lisp
  (add-hook 'nxml-mode-hook  (lambda () (flyspell-mode -1)))
#+END_SRC
** skewer-mode
   Some functions to evaluate either the region (if active) or the last expression.
#+BEGIN_SRC emacs-lisp
(defun skewer-eval-last-expression-or-region (&optional prefix)
  "Evaluate the JavaScript expression before the point in the
waiting browser. If invoked with a prefix argument, insert the
result into the current buffer."
  (interactive "P")
  (if (use-region-p)
      (skewer-eval-region (region-beginning) (region-end))
    (skewer-eval-last-expression prefix)))

(defun skewer-eval-region (beg end)
  "Execute the region as JavaScript code in the attached browsers."
  (interactive "r")
  (deactivate-mark)
  (skewer-flash-region beg end)
  (skewer-eval (buffer-substring beg end) #'skewer-post-minibuffer))

(use-package skewer-mode
  :commands (skewer-mode skewer-html-mode skewer-css-mode run-skewer)
  :config
  (define-key skewer-mode-map (kbd "C-x C-e") 'skewer-eval-last-expression-or-region))
#+END_SRC
** diff-hl
   Diff-hl seems to be a useful way to visualize uncommitted changes in a file.
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :disabled t
    :config
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode))
#+END_SRC
** Octave mode
   Open ".m" files with ~octave-mode~ by default
#+BEGIN_SRC emacs-lisp
  (autoload 'octave-mode "octave" nil t)
  ;; (setq auto-mode-alist
  ;;       (cons '("\\.m$" . octave-mode) auto-mode-alist))
#+END_SRC
** Matlab mode
   For a lot of neural science stuff, I have to use Matlab instead of Octave.

   I use a remote session, which means I usually set
   ~matlab-shell-command~ to a shell script that runs matlab over ssh.
#+BEGIN_SRC emacs-lisp
(use-package matlab
  :mode ("\\.m$" . matlab-mode)
  :init
  (setq matlab-shell-echoes nil)
  :config
  (define-key matlab-mode-map (kbd "C-c C-j") 'matlab-shell-run-region-or-line)) 
#+END_SRC

** Pdf-tools
   [[https://github.com/politza/pdf-tools][pdf-tools]] is a great package that makes viewing PDFs in Emacs much
   easier. Basically it's a replacement to DocView, but it allows you
   to do things such as incremental search, highlighting, and clicking
   on links.
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
  :init
  (setq pdf-view-continuous nil)
  :config
  (pdf-tools-install)
  :bind (:map pdf-view-mode-map
	      ("x" . xah-open-in-external-app)
	      ("M-s o" . pdf-occur)
	      ("e" . jmm/pdf-view-espeak-page)
	      ("E" . jmm/pdf-edit-helm-bibtex-notes)
	      ("a" . jmm/pdf-annotate-hydra/body)
	      ("c" . jmm/pdf-view-copy-text-other-window)
	      ("C-c C-o" . jmm/pdf-crop-image-width)))
#+END_SRC

*** Espeak a PDF page

    Have Espeak read a PDF page for you.

#+BEGIN_SRC emacs-lisp
(defvar josh/espeak-speed
  300
  "Default espeak WPM")

(defvar jmm/espeak-script
  "~/code/sh/espeak-emacs.sh"
  "Location of a shell script to run espeak. This script should
  take one argument, the initial words-per-minute (WPM) speed.")

(defun jmm/pdf-view-unfill-text (&optional deactivate default)
  "Take the PDF active region and unfill text, removing hyphens.

With optional arg DEACTIVATE, deactivate region afterward. With
argument DEFAULT, unfill this string if the region is not active."
  (let ((pdf-text (prog1
		      (if pdf-view-active-region
			  (mapconcat 'identity
				     (pdf-view-active-region-text)
				     " ")
			default)
		    (when deactivate (pdf-view-deactivate-region)))))
    (when pdf-text
      (->> pdf-text
	   (replace-regexp-in-string "-\n" "")
	   (replace-regexp-in-string "\n" " ")))))

(defun jmm/pdf-view-espeak-page (&optional arg)
  "Espeak current PDF page (or current selection) in PDF view.
   Optional ARG takes an WPM speed (i.e. \"4\" becomes 400 WPM)"
  (interactive "P")
  (let* ((wpm (number-to-string (if arg (* arg 100) josh/espeak-speed)))
	 (pdf-text (jmm/pdf-view-unfill-text t (progn (unless pdf-view-active-region (pdf-view-mark-whole-page))
						    (pdf-view-active-region-text))))
	 (fixed-pdf-text (replace-regexp-in-string "\\. \\([A-Z]\\)" ".\n\\1" pdf-text))
	 (process (start-process "espeak-process" " *espeak-pdf-view*" jmm/espeak-script wpm)))
    (process-send-string process (concat fixed-pdf-text "\n"))
    (process-send-eof process)))
#+END_SRC

*** Open bibtex notes

Many of the PDFs I open are stored in my ~org-ref~ / ~helm-bibtex~
directory. I'd like a hotkey to open notes I have for a PDF. This
function splits the window slightly and opens the notes file there.

#+BEGIN_SRC emacs-lisp
(defun jmm/pdf-edit-helm-bibtex-notes ()
  "Edit the notes for the PDF, assuming it's in one of our bibtex files"
  (interactive)
  (let ((key (file-name-base)))
    (when (= (length (window-list)) 1)
      (split-window nil -90 'left))
    (other-window 1)
    (bibtex-completion-edit-notes (list key))))
#+END_SRC

*** Keys to highlight with colors

    Pdf-tools makes highlighting fairly straightforward. Here I
    provide a hydra that makes it easy to quickly choose colors and
    annotation types for PDFs. To use it, select some text you want to
    highlight/underline/strike-out and press "~a~".

#+BEGIN_SRC emacs-lisp
(require 'hydra)
(defvar jmm/pdf-annot-type 'highlight)

(defun jmm/pdf-add-annot (color)
  (let ((regiontext (jmm/pdf-view-unfill-text)))
    (kill-new regiontext)
    (let* ((annot-id (alist-get 'id
				(pdf-annot-add-markup-annotation (pdf-view-active-region t) jmm/pdf-annot-type color)))
	   (file (bookmark-buffer-file-name))
	   (desc regiontext)
	   link)
      (org-store-link-props :type "pdfview" :annot annot-id :file file)
      (setq link (format "pdfview:%s::%s" file (list :annot annot-id)))
      (org-add-link-props :link link :description desc)
      (push (list link desc) org-stored-links)
      link)))

(defhydra jmm/pdf-annotate-color-hydra (:exit t)
  "Color"
  ("y" (jmm/pdf-add-annot "yellow") "yellow")
  ("b" (jmm/pdf-add-annot "blue") "blue")
  ("g" (jmm/pdf-add-annot "green") "green")
  ("o" (jmm/pdf-add-annot "orange") "orange")
  ("r" (jmm/pdf-add-annot "red") "red")
  ("B" (jmm/pdf-add-annot "brown") "brown")
  ("p" (jmm/pdf-add-annot "pink") "pink")
  ("v" (jmm/pdf-add-annot "violet") "violet")
  ("q" nil "cancel"))

(defun jmm/pdf-annotate-run-hydra-with-type (type)
  "See `pdf-annot-add-markup-annotation' for possible TYPEs"
  (setq jmm/pdf-annot-type type)
  (let ((jmm/pdf-annot-type type))
    (jmm/pdf-annotate-color-hydra/body)))

(defhydra jmm/pdf-annotate-hydra (:exit t)
  "Annotate"
  ("h" (jmm/pdf-annotate-run-hydra-with-type 'highlight) "highlight")
  ("s" (jmm/pdf-annotate-run-hydra-with-type 'squiggly) "squiggly")
  ("u" (jmm/pdf-annotate-run-hydra-with-type 'underline) "underline")
  ("o" (jmm/pdf-annotate-run-hydra-with-type 'strike-out) "strike-out")
  ("q" nil "cancel"))
#+END_SRC

*** Clip an image

    A really cool feature of PDF Tools is that there's a command
    ~pdf-view-extract-region-image~ that's bound to ~C-c C-i~. By
    holding down ~Meta~ and dragging your mouse, you can easily select
    a region to clip. The only problem (for me) is that sometimes this
    clipped image is kinda small. If I want to use the image in a
    presentation, I'd like a high-resolution version.

    This command allows me to extract an image with a specified width.

#+BEGIN_SRC emacs-lisp
(require 'dash)
(defvar jmm/pdf-image-preferred-width 1000
  "Default width for cropping an image")

(defun jmm/pdf-crop-image-width (&optional arg)
  "Crop an image. Use optional ARG as the pixel width, otherwise
use `jmm/pdf-image-preferred-width'.

This function uses `pdf-view-extract-region-image'
but more easily allows you to scale up images."
  (interactive "P")
  (-let* (((left top right bottom) (car (pdf-view-active-region)))
	  (percentwidth (- right left))
	  (desiredwidth (if (numberp arg) arg jmm/pdf-image-preferred-width))
	  (fakesize (round (/ desiredwidth percentwidth))))
    (pdf-view-extract-region-image (pdf-view-active-region) nil (cons fakesize nil))))
#+END_SRC
*** Copy string to other window

    This function makes it easy to copy quotes into my notes files.

#+BEGIN_SRC emacs-lisp
(defun jmm/pdf-view-copy-text-other-window (&optional arg)
  "Copy the text in PDF view to the other window.
This function automatically unfills and re-fills text, eliminating word-wrapping hyphens.
With optional ARG, quote the string."
  (interactive "P")
  (let* ((fixed-pdf-text (jmm/pdf-view-unfill-text t (car kill-ring))))
    ;; (save-selected-window
    (other-window 1)
    (when arg (insert "\""))
    (insert fixed-pdf-text)
    (when arg (insert "\""))
    (fill-paragraph)))
#+END_SRC

** Ace-window
[[https://github.com/abo-abo/ace-window][ace-window]] seems to provide a good way to switch between different windows.
It also provides functions for swapping and moving windows, which is super helpful.
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind (("C-9" . ace-window)
	 ("C-(" . ace-swap-window))
  :init
  (setq aw-scope 'visible))
#+END_SRC

** Web-mode
   Web-mode is a pretty good mode for editing HTML and JSX files.
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode ("\\.html?\\'" . web-mode))
#+END_SRC

** Emojify
   Emoji are very important.
#+BEGIN_SRC emacs-lisp
(use-package emojify
  :ensure t
  :defer t
  :init
  (setq emojify-emoji-styles '(unicode))
  (bind-key "<f9> e" 'emojify-insert-emoji)
  :config
  (global-emojify-mode 1))
#+END_SRC
** Maxima

   I don't really use Maxima right now, but at one point I was trying to learn it

   Here's a setup for Maxima, from EmacsWiki.
 #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "/usr/share/emacs/site-lisp/maxima/")
   (autoload 'maxima-mode "maxima" "Maxima mode" t)
   (autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
   (autoload 'maxima "maxima" "Maxima interaction" t)
   (autoload 'imath-mode "imath" "Imath mode for math formula input" t)
   (setq imaxima-use-maxima-mode-flag t)
   (add-to-list 'auto-mode-alist '("\\.ma[cx]" . maxima-mode))
 #+END_SRC
** Processing
   Define the location of processing.
   Will be different for you.
 #+begin_src emacs-lisp
   (setq processing-location "~/Downloads/processing-2.1.2/processing-java")
 #+end_src
** Dumb jump

   I tried using [[https://github.com/jacktasia/dumb-jump][dumb-jump]] a bit, but didn't like its default keybindings.

   [[https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/][Mike Zamansky]] has a post with some good bindings for it.

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :ensure
  :bind (("M-g o" . dumb-jump-go-other-window)
	 ("M-g j" . dumb-jump-go)
	 ("M-'" . dumb-jump-quick-look)
	 ("M-g a" . dumb-jump-back)
	 ("M-g x" . dumb-jump-go-prefer-external)
	 ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config
  (setq dumb-jump-selector 'helm))
#+END_SRC
** goto-last-change

   ~goto-last-change~ is a simple, but pretty handy, function. I find
   myself occasionally scrolling off screen, and forgetting where I
   last was. ~goto-last-change~ helps me go back to where I was last editing.

#+BEGIN_SRC emacs-lisp
(use-package goto-last-change
  :ensure
  :bind (("C-x C-'" . goto-last-change)))
#+END_SRC
** which-key

   ~[[https://github.com/justbur/emacs-which-key][which-key]]~ displays keybindings for prefixes. Handy if you forget which key maps to what.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure
  :defer 5
  :diminish which-key-mode
  :config (which-key-mode))
#+END_SRC
** SQL

   In ~sql-interactive-mode~, don't wrap lines.
#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook
	  (lambda ()
	    (toggle-truncate-lines 1)))
#+END_SRC
** buffer-move

   [[https://www.emacswiki.org/emacs/buffer-move.el][Buffer-move]] makes it easy to swap windows.

#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :bind (("<C-S-up>" . buf-move-up)
	 ("<C-S-down>" . buf-move-down)
	 ("<C-S-left>" . buf-move-left)
	 ("<C-S-right>" . buf-move-right)))
#+END_SRC
** Company

   Company provides pretty decent completion.
#+BEGIN_SRC emacs-lisp
(use-package company
  :if (not noninteractive)
  :diminish company-mode
  :ensure t
  :defer 3
  :init (global-company-mode 1)

  :bind (:map company-active-map
	 ("C-n" . company-select-next)
	 ("C-p" . company-select-previous)))
#+END_SRC
** Docker

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t
  :mode ("Dockerfile\\'" . dockerfile-mode))
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode ("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-mode))
#+END_SRC

** Eyebrowse

   [[https://github.com/wasamasa/eyebrowse][Eyebrowse]] seems like a decent way to manage window configurations.

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :if (not noninteractive)
  :ensure t
  :bind-keymap ("C-c w" . eyebrowse-mode-map)
  :init
  ;; So we don't override "refile" for org-mode
  (setq eyebrowse-keymap-prefix (kbd "C-c w"))
  ;; Switch to scratch buffer for a new workspace
  (setq eyebrowse-new-workspace t)
  :config
  (eyebrowse-mode t)
  ;; Se we defer loading, we'll need to initialize all frames when we first call it.
  (--each (with-selected-frame it (eyebrowse-init)) (frame-list)))
#+END_SRC
** Markdown mode
   I'm using markdown mode to edit markdown and Rmarkdown files.

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode (("\\.Rmd" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode)
	 ("\\.md\\'" . markdown-mode))
  :ensure t)
#+END_SRC

When editing code indirectly (with ~edit-indirect-region~, which
~markdown-mode~ calls), display it in the same window. I don't want it
obscuring other windows.

#+BEGIN_SRC emacs-lisp
(use-package edit-indirect
  :after markdown-mode
  :init
  (add-to-list 'display-buffer-alist
	       `("^\\*edit-indirect" . (,#'display-buffer-same-window)))
  :config
  ;; Conflicts with ESS
  (unbind-key "C-c C-c" edit-indirect-mode-map))
#+END_SRC
